package org.example.VehicleRental;

import java.util.ArrayList;
import java.util.List;

// Abstract Class: Vehicle
abstract class Vehicle {
    private String vehicleId;
    private String model;
    private double baseRentalRate;
    private boolean isAvailable;

    public Vehicle(String vehicleId, String model, double baseRentalRate) {
        this.vehicleId = vehicleId;
        this.model = model;
        this.baseRentalRate = baseRentalRate;
        this.isAvailable = true; // Default to available
    }

    public String getVehicleId() {
        return vehicleId;
    }

    public String getModel() {
        return model;
    }

    public double getBaseRentalRate() {
        return baseRentalRate;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    public abstract double calculateRentalCost(int days);

    public abstract boolean isAvailableForRental();
}

// Rentable Interface
interface Rentable {
    void rent(Customer customer, int days);

    void returnVehicle();
}

// Concrete Class: Car
class Car extends Vehicle implements Rentable {
    private boolean hasAirConditioning;

    public Car(String vehicleId, String model, double baseRentalRate, boolean hasAirConditioning) {
        super(vehicleId, model, baseRentalRate);
        this.hasAirConditioning = hasAirConditioning;
    }

    @Override
    public double calculateRentalCost(int days) {
        return getBaseRentalRate() * days + (hasAirConditioning ? 10 * days : 0);
    }

    @Override
    public boolean isAvailableForRental() {
        return isAvailable();
    }

    @Override
    public void rent(Customer customer, int days) {
        if (isAvailableForRental()) {
            setAvailable(false);
            System.out.println(customer.getName() + " rented " + getModel() + " for " + days + " days.");
        } else {
            System.out.println(getModel() + " is not available for rent.");
        }
    }

    @Override
    public void returnVehicle() {
        setAvailable(true);
        System.out.println(getModel() + " has been returned.");
    }
}

// Concrete Class: Motorcycle
class Motorcycle extends Vehicle implements Rentable {

    public Motorcycle(String vehicleId, String model, double baseRentalRate) {
        super(vehicleId, model, baseRentalRate);
    }

    @Override
    public double calculateRentalCost(int days) {
        return getBaseRentalRate() * days;
    }

    @Override
    public boolean isAvailableForRental() {
        return isAvailable();
    }

    @Override
    public void rent(Customer customer, int days) {
        if (isAvailableForRental()) {
            setAvailable(false);
            System.out.println(customer.getName() + " rented " + getModel() + " for " + days + " days.");
        } else {
            System.out.println(getModel() + " is not available for rent.");
        }
    }

    @Override
    public void returnVehicle() {
        setAvailable(true);
        System.out.println(getModel() + " has been returned.");
    }
}

// Concrete Class: Truck
class Truck extends Vehicle implements Rentable {

    private double loadCapacity;

    public Truck(String vehicleId, String model, double baseRentalRate, double loadCapacity) {
        super(vehicleId, model, baseRentalRate);
        this.loadCapacity = loadCapacity;
    }

    @Override
    public double calculateRentalCost(int days) {
        return getBaseRentalRate() * days + (loadCapacity > 1000 ? 20 * days : 0); // Additional fee for heavy loads
    }

    @Override
    public boolean isAvailableForRental() {
        return isAvailable();
    }

    @Override
    public void rent(Customer customer, int days) {
        if (isAvailableForRental()) {
            setAvailable(false);
            System.out.println(customer.getName() + " rented " + getModel() + " for " + days + " days.");
        } else {
            System.out.println(getModel() + " is not available for rent.");
        }
    }

    @Override
    public void returnVehicle() {
        setAvailable(true);
        System.out.println(getModel() + " has been returned.");
    }
}

// Customer Class
class Customer {

    private String name;
    private String customerId;
    private List<RentalTransaction> rentalHistory;

    public Customer(String name, String customerId) {
        this.name = name;
        this.customerId = customerId;
        this.rentalHistory = new ArrayList<>();
    }

    public String getName() { return name; }

    public String getCustomerId() { return customerId; }

    // Add methods to manage rental history.
    public void addRental(RentalTransaction transaction) {
        rentalHistory.add(transaction);
    }
}

// Rental Transaction Class
class RentalTransaction {

    private Customer customer;
    private Vehicle vehicle;
    private int rentalDays;

    public RentalTransaction(Customer customer, Vehicle vehicle, int rentalDays) {
        this.customer = customer;
        this.vehicle = vehicle;
        this.rentalDays = rentalDays;
        customer.addRental(this); // Add transaction to customer's history
    }

    // Getters and methods to process transactions.
}

// Rental Agency Class
class RentalAgency {

    private List<Vehicle> vehicles;

    public RentalAgency() {
        vehicles = new ArrayList<>();
    }

    public void addVehicle(Vehicle vehicle) { vehicles.add(vehicle); }

    // Other methods to manage rentals and generate reports.
}

// Main Class to Run the Program
class VehicleRentalManagementSystem {

    public static void main(String[] args) {
        RentalAgency agency = new RentalAgency();

        // Create some vehicles
        Car car1 = new Car("C001", "Toyota Camry", 50.0, true);
        Motorcycle motorcycle1 = new Motorcycle("M001", "Harley Davidson", 30.0);
        Truck truck1 = new Truck("T001", "Ford F-150", 70.0, 1200.0);

        // Add vehicles to the agency's fleet
        agency.addVehicle(car1);
        agency.addVehicle(motorcycle1);
        agency.addVehicle(truck1);

        // Create a customer
        Customer customer1 = new Customer("Alice", "CUST001");

        // Simulate renting and returning vehicles
        car1.rent(customer1, 4); // Alice rents the car for 3 days
        motorcycle1.rent(customer1, 5); // Alice rents the motorcycle for 2 days

        car1.returnVehicle(); // Alice returns the car
        motorcycle1.returnVehicle(); // Alice returns the motorcycle

        truck1.rent(customer1, 3); // Alice rents the truck for 5 days

        truck1.returnVehicle(); // Alice returns the truck

        // Displaying the rental costs for demonstration purposes
        System.out.println("Rental cost for Car: $" + car1.calculateRentalCost(4));
        System.out.println("rental cost for Motorcycle: $" + motorcycle1.calculateRentalCost(5));
        System.out.println("rental cost Truck: $" + truck1.calculateRentalCost(3));
    }
}
